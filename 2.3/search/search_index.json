{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"DataJoint SciViz","text":"<p>DataJoint SciViz is a generic scientific visualization framework for building dashboards of DataJoint pipelines.</p> <ul> <li>International Brain Lab Data Portal - Website deployed with DataJoint SciViz</li> </ul> <ul> <li>Getting Started page - Start building your dashboard</li> </ul> <ul> <li>Concepts section - Detailed descriptions of the spec sheet, grids, and components</li> </ul> <ul> <li>Code repository</li> </ul>"},{"location":"changelog/","title":"Changelog","text":"<p>Observes Semantic Versioning standard and Keep a Changelog convention.</p>"},{"location":"changelog/#232-04-27-23","title":"2.3.2 - 04-27-23","text":""},{"location":"changelog/#fixed","title":"Fixed","text":"<ul> <li>Permissions of files in the <code>/home/node</code> directory PR #116</li> <li>Small bugs with datetime picker and slideshow component #117</li> </ul>"},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Pharus hotreloading script to simplify dev workflow PR #117</li> </ul>"},{"location":"changelog/#231-04-26-23","title":"2.3.1 - 04-26-23","text":""},{"location":"changelog/#added_1","title":"Added","text":"<ul> <li><code>booleans</code> key to form component spec to specify boolean attributes and make their inputs True/False (#111) PR #114</li> </ul>"},{"location":"changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Queries now properly refetch tables on insert (#112) PR #113</li> </ul>"},{"location":"changelog/#230-04-14-23","title":"2.3.0 - 04-14-23","text":""},{"location":"changelog/#added_2","title":"Added","text":"<ul> <li>IFrame component (#88) PR #92</li> <li>Extra optional Datadog Logging #110</li> </ul>"},{"location":"changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Hidden pages bug PR #107</li> </ul>"},{"location":"changelog/#changed","title":"Changed","text":"<ul> <li>Update logo PR #104</li> <li>Update readme - Update reference and citation sections PR #104</li> <li>Update docs - Add index page. Update navigation. Remove Google Analytics environment variable PR #104</li> <li>Update hidden page behavior to mimic pre 2.0 PR #109</li> </ul>"},{"location":"changelog/#221-04-07-23","title":"2.2.1 - 04-07-23","text":""},{"location":"changelog/#changed_1","title":"Changed","text":"<ul> <li>Datadog replay sampling rate and set user ID PR #106</li> </ul>"},{"location":"changelog/#220-04-04-23","title":"2.2.0 - 04-04-23","text":""},{"location":"changelog/#added_3","title":"Added","text":"<ul> <li>DataDog real user monitoring (RUM) implementation PR #101</li> </ul>"},{"location":"changelog/#changed_2","title":"Changed","text":"<ul> <li>Forms now clear previous values on preset selection (#98) PR #99</li> <li>Inserting into a form will refresh all tables on the page PR #99</li> <li>Optimized dockerfile and added build step PR#100</li> </ul>"},{"location":"changelog/#fixed_3","title":"Fixed","text":"<ul> <li>Date, Datetime, Time, and Timestamp type attribute presets for forms PR #99</li> </ul>"},{"location":"changelog/#211-03-24-23","title":"2.1.1 - 03-24-23","text":""},{"location":"changelog/#changed_3","title":"Changed","text":"<ul> <li>Optimized table component queries PR #97</li> </ul>"},{"location":"changelog/#210-03-21-23","title":"2.1.0 - 03-21-23","text":""},{"location":"changelog/#added_4","title":"Added","text":"<ul> <li>OIDC authentication (#68) PR #91</li> <li>Option to set default table page size (#94) PR #95</li> <li>Option to add preset values to forms PR #96</li> </ul>"},{"location":"changelog/#removed","title":"Removed","text":"<ul> <li>All deprecated files from source PR #90</li> </ul>"},{"location":"changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Bug with table page size not updating properly (#94) PR #95</li> </ul>"},{"location":"changelog/#200-02-17-23","title":"2.0.0 - 02-17-23","text":""},{"location":"changelog/#changed_4","title":"Changed","text":"<ul> <li>Replaced build step with hot-reload yaml spec conversion to json spec in public folder PR #77</li> <li>Replaced built pages with SciViz component PR #77, #81</li> </ul>"},{"location":"changelog/#added_5","title":"Added","text":"<ul> <li>OIDC Support for individual components PR #79</li> <li>Docstrings for new components PR #78</li> </ul>"},{"location":"changelog/#111-02-09-23","title":"1.1.1 - 02-09-23","text":""},{"location":"changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Form inputs for attributes with time precision e.g: <code>datetime(6)</code> (#65) PR #75</li> </ul>"},{"location":"changelog/#110-02-06-23","title":"1.1.0 - 02-06-23","text":""},{"location":"changelog/#added_6","title":"Added","text":"<ul> <li>DateRangePicker component PR #72</li> <li>Slideshow component PR #72</li> </ul>"},{"location":"changelog/#102-1-31-23","title":"1.0.2 - 1-31-23","text":""},{"location":"changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Forms for tables with datetime FPKs would return an incorrect datetime format, causing inserts to fail (#62) PR #64</li> </ul>"},{"location":"changelog/#101-1-26-23","title":"1.0.1 - 1-26-23","text":""},{"location":"changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Attributes with \"null\" or \"NULL\" default values would incorrectly get marked as required inputs in forms (#60) PR #61</li> </ul>"},{"location":"changelog/#100-12-30-22","title":"1.0.0 - 12-30-22","text":""},{"location":"changelog/#added_7","title":"Added","text":"<ul> <li>Kubernetes docs PR #50</li> <li>Antd Table component PR #53, #54</li> <li>Dynamic form component PR #55</li> </ul>"},{"location":"changelog/#011-04-01-22","title":"0.1.1 - 04-01-22","text":""},{"location":"changelog/#added_8","title":"Added","text":"<ul> <li>Support for hosting sci-viz under a subdirectory PR #44</li> </ul>"},{"location":"changelog/#010-03-18-22","title":"0.1.0 - 03-18-22","text":""},{"location":"changelog/#added_9","title":"Added","text":"<ul> <li>pharus As submodule (#17) PR #33</li> <li>Components PR #33:<ul> <li><code>table</code></li> <li><code>markdown</code></li> <li><code>metadata</code></li> <li><code>plot:plotly:stored_json</code></li> <li><code>file:image:attach</code></li> </ul> </li> <li>Components PR #41:<ul> <li><code>radiobuttons</code></li> <li><code>dropdown-query</code></li> <li><code>dropdown-static</code></li> </ul> </li> <li>Grid system PR #33</li> <li>Dynamic grid system (#23) PR #33</li> <li>Database Login PR (#9) #33</li> <li>Basic GHA for repo PR (#26) #33</li> <li>Hotreloading based off of spec sheet (#24) PR #33</li> <li>Initial framework for jest testing (#27) PR #33</li> <li>loginless mode PR #41</li> </ul>"},{"location":"citation/","title":"Citation","text":"<ul> <li>If your work uses DataJoint SciViz, please cite the following Research Resource Identifier (RRID) and manuscript.</li> </ul> <ul> <li>DataJoint (RRID:SCR_014543) - DataJoint SciViz (version <code>&lt;Enter version number&gt;</code>)</li> </ul> <ul> <li>Yatsenko D, Nguyen T, Shen S, Gunalan K, Turner CA, Guzman R, Sasaki M, Sitonic D, Reimer J, Walker EY, Tolias AS. DataJoint Elements: Data Workflows for Neurophysiology. bioRxiv. 2021 Jan 1. doi: https://doi.org/10.1101/2021.03.30.437358</li> </ul>"},{"location":"getting_started/","title":"Getting Started","text":""},{"location":"getting_started/#installation","title":"Installation","text":"<p>If you have not done so already, please install the following dependencies:</p> <ul> <li>Docker</li> <li>Docker Compose</li> </ul>"},{"location":"getting_started/#running-the-application","title":"Running the application","text":"<p>To start the application, use the command:</p> <pre><code>HOST_UID=\"$(id -u)\" PY_VER=3.8 IMAGE=djbase DISTRO=alpine PHARUS_VERSION=$(cat pharus/pharus/version.py | tail -1 | awk -F\\\" '{print $2}') docker compose up --build\n</code></pre> <p>To stop the application, use the same command as before but with <code>down</code> in place of <code>up --build</code></p>"},{"location":"getting_started/#oidc-authentication","title":"OIDC Authentication","text":"<p>To authenticate via OIDC, the following environment variables must be set in the <code>.env</code>:</p> <pre><code>PHARUS_OIDC_CLIENT_SECRET=\nPHARUS_OIDC_CLIENT_ID=\nPHARUS_OIDC_REDIRECT_URI=\nPHARUS_OIDC_CODE_VERIFIER=\nPHARUS_OIDC_TOKEN_URL=\nPHARUS_OIDC_PUBLIC_KEY=\n</code></pre>"},{"location":"concepts/components/","title":"Components","text":"<p>All component objects consist of these six keys:</p> <ul> <li><code>type</code> - The type of component to generate</li> <li><code>route</code> - The backend route for the rest api query, must start with a <code>/</code><ul> <li>Note: the markdown component does not require a route</li> </ul> </li> <li><code>x</code> - The x position on the grid starting at 0</li> <li><code>y</code> - The y position on the grid starting at 0</li> <li><code>height</code> - The amount of grid cells tall a component can be, minimum 1</li> <li><code>width</code> - The amount of grid cells wide a component can be, minimum 1</li> </ul>"},{"location":"concepts/components/#table-component","title":"Table component","text":"<p><code>type:</code> table</p> <p>The Table component takes two additional keys:</p> <ul> <li><code>restriction</code> - The restriction for the datajoint query</li> <li><code>dj_query</code> - The datajoint query for the table data</li> </ul> <p>The Table component also has four optional keys:</p> <ul> <li><code>link?</code> - The route of the hidden page to link selected rows to</li> <li><code>channel?</code> - The name of the component's channel</li> <li><code>channels?</code> - The list of channels to listen to</li> <li><code>page_size_default?</code> - The default page size in number of rows</li> </ul> <p>If setup correctly the component will render the result of the query in a table that supports paging, sorting, and filtering.</p>"},{"location":"concepts/components/#adding-color-to-your-tables-using-projections","title":"Adding color to your tables using projections","text":"<pre><code>def dj_query(vms):\n    TableA, TableB = (vms['test_group1_simple'].TableA, vms['test_group1_simple'].TableB)\n    return ((TableA * TableB).proj(...,\n                                   _sciviz_font='IF(a_name = \"Raphael\", \"rgb(255, 0, 0)\", NULL)',\n                                   _sciviz_background='IF(a_name = \"Raphael\", \"rgba(50, 255, 0, 0.16)\", NULL)',)\n                                  ), dict(order_by='b_number')\n</code></pre> <p>This is an example of a table query that has a projection that applys a text color as well as a background color. It does so through the use of 2 protected column names:</p> <ul> <li><code>_sciviz_font</code> for the font color</li> <li><code>_sciviz_background</code> for the background color   these two fields will accept any color format that css does.</li> </ul> <p>In the example we do a join of two tables and then do a projection where we create 2 new columns with the protected names and if a condition is met we set their field to a css-compatable color else we have it be <code>NULL</code>. In the example above we use rgb when we do not need transparency and rgba when we do. here is a good tool for picking css colors.</p>"},{"location":"concepts/components/#markdown-component","title":"Markdown component","text":"<p><code>type:</code> markdown</p> <p>The Markdown component takes one additional key:</p> <ul> <li><code>text: |</code><ul> <li>underneath the <code>|</code> operator you can place any markdown text block that you want</li> </ul> </li> </ul> <p>The Markdown component also has one optional key:</p> <ul> <li><code>image_route?</code> - The route to the image to use as a background</li> </ul>"},{"location":"concepts/components/#plot-component-from-stored-plotly-json","title":"Plot component from stored Plotly JSON","text":"<p><code>type:</code> plot:plotly:stored_json</p> <p>The Plot component takes two additional keys:</p> <ul> <li><code>restriction</code> - The restriction for the datajoint query</li> <li><code>dj_query</code> - The datajoint query for for the table data</li> </ul> <p>The Plot component also has one optional key:</p> <ul> <li><code>channels</code> - An array of channels to listen to for additional restrictions from other components (slider, dropdown, ect.)</li> </ul> <p>Additionally for the plot to render properly the result of your query must be a single entry with one element that is a plotly JSON. An easy way to do this is to set the <code>fetch_args=[]</code> in your <code>dj_query</code> to be only the column that contains a plotly JSON and additionaly set your restriction to be the index of the plot you are looking for</p>"},{"location":"concepts/components/#metadata-component","title":"Metadata component","text":"<p><code>type:</code> metadata</p> <p>The Metadata component takes two additional keys:</p> <ul> <li><code>restriction</code> - The restriction for the datajoint query</li> <li><code>dj_query</code> - The datajoint query for for the table data.</li> </ul> <p>Additionally the metadata component only takes a single row from a table as its input so the <code>dj_query</code> and <code>restriction</code> need to be properly set to produce a single record. This component is not very useful by itself but when combined with other components as part of a template in a <code>Dynamic grid</code> it can provide useful information on what the other components are showing.</p>"},{"location":"concepts/components/#image-component","title":"Image component","text":"<p><code>type:</code> file:image:attach</p> <p>The Image component takes two additional keys:</p> <ul> <li><code>restriction</code> - The restriction for the datajoint query</li> <li><code>dj_query</code> - The datajoint query for for the table data.</li> </ul> <p>Additionally the image that you want to display needs to be stored as a datajoint attach attribute type and your query should produce only one record with one column which is the column where the image is stored.</p>"},{"location":"concepts/components/#form-component","title":"Form component","text":"<p><code>type:</code> form</p> <p>The Form component takes one additional key:</p> <ul> <li><code>tables</code> - The list of tables in \"<code>schema.table</code>\" format to insert into<ul> <li>Table names can be templated, either fully or partially, using the <code>'{keyword}'</code> format. This keyword can then be assigned a value by an emitter component as a query parameter.</li> </ul> </li> </ul> <p>The Form can also take three optional keys:</p> <ul> <li> <p><code>map</code> - A mapping to change the displayed names of the fields in the form</p> <p>A map takes a list of three keys:</p> <ul> <li><code>type:</code> attribute | table</li> <li><code>input</code> - The new name of the field</li> <li><code>destination</code> - The field to be renamed</li> </ul> <p>A map entry with a <code>table</code> type can also take one optional key:</p> <ul> <li><code>map</code> - A nested mapping of the same structure to change the displayed names of the table's primary key attributes</li> </ul> </li> </ul> <ul> <li><code>booleans</code> - An array of attributes that were originally desribed as booleans but have been aliased to tinyint by datajoint<ul> <li>Specified attributes will have their inputs converted to True/False dropdowns</li> </ul> </li> <li><code>channels</code> - An array of channels to listen to for templated table name values</li> <li><code>presets</code> - A function to generate presets for the form</li> </ul>"},{"location":"concepts/components/#slideshow-component","title":"Slideshow component","text":"<p><code>type:</code> slideshow</p> <p>The Slideshow component takes four additional keys:</p> <ul> <li><code>batch_size</code> - The number of concurrent requests</li> <li><code>chunk_size</code> - The number of frames per request</li> <li><code>buffer_size</code> - The number of requests kept in memory</li> <li><code>max_FPS</code> - The max frames per second to display</li> </ul> <p>The Slideshow can also take one optional key:</p> <ul> <li><code>channels</code> - An array of channels to listen to for setting the date range</li> </ul>"},{"location":"concepts/components/#slider-component","title":"Slider component","text":"<p>The Slider is a component that takes a datajoint query and creates a slider based off the payload that the query returns. It turns each record into an index on the slider and also emits the currently selected record on its channel as a restriction to other components.</p> <p><code>type:</code> slider</p> <p>The Slider component takes three additional keys:</p> <ul> <li><code>restriction</code> - The restriction for the datajoint query.</li> <li><code>dj_query</code> - The datajoint query for for the table data.</li> <li><code>channel</code> - The name of the channel that the slider outputs its restriction on.</li> </ul> <p>The Slider component also has one optional key:</p> <ul> <li><code>channels</code> - An array of channels to listen to for restricting its own query.</li> </ul>"},{"location":"concepts/components/#radiobuttondropdown-static-component","title":"Radiobutton/Dropdown-static component","text":"<p>Similar to the Slider, the Radiobutton and Dropdown-static components are components that supply a selected restriction on a channel to a component that can accept them.</p> <p><code>type:</code> radiobuttons | dropdown-static</p> <p>The Radiobutton/Dropdown-static components takes two additional keys:</p> <ul> <li><code>channel</code> - The name of the channel that the Radiobutton/dropdown-static outputs its restriction on.</li> <li> <p><code>content</code> - A dictionary of key value pairs, the key is what text is shown to the user while the value is the actual restriction.</p> <ul> <li>Example:</li> </ul> <p><code>content:   mouse 0: 'mouse_id=0'   mouse 1: 'mouse_id=1'   mouse 2: 'mouse_id=2'</code></p> </li> </ul>"},{"location":"concepts/components/#dropdown-query-component","title":"Dropdown-query component","text":"<p>The Dropdown-query component is the same as the slider component except it only expects a result with one column.</p> <p><code>type:</code> dropdown-query</p> <p>The Dropdown-query component takes three additional keys:</p> <ul> <li><code>restriction</code> - The restriction for the datajoint query.</li> <li><code>dj_query</code> - The datajoint query for for the table data.</li> <li><code>channel</code> - The name of the channel that the slider outputs its restriction on.</li> </ul>"},{"location":"concepts/components/#date-range-picker-component","title":"Date-Range-Picker component","text":"<p>The Date-Range-Picker component emits a <code>startTime</code> and <code>endTime</code> datetime value to channeled components</p> <p><code>type:</code> daterangepicker</p> <p>The Date-Range-Picker takes one additional key:</p> <ul> <li><code>channel</code> - The name of the channel that the date range picker outputs its restriction on.</li> </ul>"},{"location":"concepts/dev_instructions/","title":"Developer Instructions","text":"<p>There are a couple issues to address if you are collaborating on this project</p> <ul> <li>Contributors will have have to point the submodule to their own fork of pharus if they need to edit pharus to support new features for sci-viz.</li> <li>That change to pharus would need to be pr'd and then merged into pharus before we can pr and merge their change to sci-viz as we probably dont want unreviewed code linked to sci-viz nor do we want the submodule pointing to their fork of pharus.</li> </ul>"},{"location":"concepts/dev_instructions/#environment-variables","title":"Environment Variables","text":"<p>To specify the location of your spec sheet you need to set this environment variable:</p> <pre><code>DJSCIVIZ_SPEC_PATH=test/test_spec.yaml\n</code></pre>"},{"location":"concepts/dev_instructions/#user","title":"User","text":"<p>You will need to change the <code>user</code> value for the SciViz service in your compose file:</p> <pre><code>user: root\n</code></pre>"},{"location":"concepts/dev_instructions/#public-folder","title":"Public Folder","text":"<p>Config values for images or icons must be relative to the public folder. To add your file, follow these steps in your compose file: 1. Mount the file into the container 2. Copy the file to <code>/home/node/public</code> before running <code>sci-viz-hotreload-dev.sh</code></p> <p>In production environments, the file must instead be copied to <code>/home/node/build</code> before running <code>sci-viz-hotreload-prod.sh</code></p>"},{"location":"concepts/grids/","title":"Grids","text":"<p>There are two types of grids Fixed and Dynamic</p>"},{"location":"concepts/grids/#fixed-grid","title":"Fixed grid","text":"<p>A fixed grid object requires all components to explicitly give their position and size on the grid. It consists of five keys:</p> <ul> <li><code>Grid_Name</code> - A user-defined key for the name of the grid<ul> <li><code>type</code> - Indicates the type of grid, in this case <code>type: fixed</code></li> <li><code>columns</code> - The number of columns that the grid will have</li> <li><code>row_height</code> - The height of each row in pixels</li> <li><code>components</code> - A dictionary of component objects. View the Components section for more information</li> </ul> </li> </ul>"},{"location":"concepts/grids/#dynamic-grid","title":"Dynamic grid","text":"<p>A dynamic grid object takes a datajoint query and then uses each record and applies that record as a restriction to a template of components. It then spawns a single or group of components for each record of that parent query but the components query is restricted by the entire record that has been passed in from the parent query.</p> <p>An example of this would be as follows:</p> <ul> <li>You have one table that represents all identifying data of a subject, lets use Mouse as an example for the subject and the table name</li> <li>You also have a table that contains a single plot per Mouse primary key, lets call this table MousePlots</li> <li>You have no idea how many plots are in MousePlots but you want to display a live view of all of them</li> <li>What you can do is create a dynamic grid with the parent query being for the Mouse table and a plot component with a query for the MousePlot table. This will produce all of the plots that are available without knowing how many there are in the database.</li> </ul> <p>A dynamic grid object consists of nine keys:</p> <ul> <li><code>Grid_Name</code> - A user-defined key for the name of the grid<ul> <li><code>type</code> - Indicates the type of grid, in this case <code>type: dynamic</code></li> <li><code>columns</code> - The number of columns that the grid will have</li> <li><code>row_height</code> - The height of each row in pixels</li> <li><code>route</code> - The backend api route for the parent query</li> <li><code>component_templates</code> - A dictionary of component objects that serve as a template. Currently only the <code>metadata</code> and <code>plot</code> components are supported in dynamic mode</li> <li><code>restriction</code> - A restriction for the datajoint query</li> <li><code>dj_query</code> - The parent datajoint query that will provide the restriction records</li> <li><code>channels?</code> - A list of emitter components to be channeled with</li> </ul> </li> </ul> <p>Additionally any components in the dynamic grid do not need <code>x</code>, <code>y</code> , <code>height</code>, and <code>width</code> fields.</p>"},{"location":"concepts/pages/","title":"Pages","text":"<p>A SciViz page object consists of four keys:</p> <ul> <li><code>Page_Name</code> - A user-defined key for the name of the page<ul> <li><code>route</code> - A unique route for the SciViz page</li> <li><code>grids</code> - A dictionary of grid objects. View the Grids section for more information</li> <li><code>hidden?</code> - Whether or not the page is hidden: True | False</li> </ul> </li> </ul>"},{"location":"concepts/pages/#hidden-pages","title":"Hidden Pages","text":"<p>Hidden pages are typically used in conjunction with a linked table component. When a row of a linked table is selected, it will pass the selected primary keys as a restriction on the grids and components of the linked hidden page and display the result.</p>"},{"location":"concepts/spec_sheet/","title":"Dynamic Spec Sheet","text":"<p>SciViz is used to build visualization dashboards, this is done through a single spec sheet. An example spec sheet named <code>test_spec.yaml</code> is included in the <code>test</code> directory.</p>"},{"location":"concepts/spec_sheet/#format","title":"Format","text":"<p>The SciViz spec sheet consists of some top level keys that are used to configure various options, as well as a <code>pages</code> key, which consists of a dictionary of <code>grids</code>, which contains a dictionary of <code>components</code>. Here is a break down of the spec sheet, where optional keys are followed by a <code>?</code>:</p> <ul> <li><code>SciViz</code> - The top level SciViz key<ul> <li><code>auth</code> - Config values for authentication<ul> <li><code>mode</code> - The authentication mode: database | oidc | none</li> <li><code>endpoint?</code> - The endpoint to connect to for oidc authentication</li> <li><code>database?</code> - The database for oidc authentication</li> <li><code>client_id?</code> - The client ID for oidc authentication</li> </ul> </li> <li><code>pages</code> - A dictionary of SciViz page objects. View the Pages section for more information</li> <li><code>route?</code> - The route for SciViz to be hosted at</li> <li><code>website_title?</code> - The title of the SciViz webpage</li> <li><code>favicon_name?</code> - The path to a valid favicon file relative to the <code>public</code> folder</li> <li><code>hostname?</code> - The name of the database host to preset the login page</li> <li><code>header?</code> - Config values for the header banner<ul> <li><code>image_route</code> - The path to a valid image file relative to the <code>public</code> folder</li> <li><code>text</code> - The text to display at the header</li> </ul> </li> <li><code>login?</code> - Config values for the login page<ul> <li><code>image_route</code> - The path to a valid image file relative to the <code>public</code> folder</li> </ul> </li> <li><code>datadog?</code> - Config values to enable datadog RUM<ul> <li><code>applicationId</code> - The ID of the datadog application to connect to</li> <li><code>clientToken</code> - The datadog client token associated with the application</li> <li><code>service</code> - The name of the datadog application</li> </ul> </li> </ul> </li> <li><code>version?</code> - The SciViz spec version</li> </ul>"},{"location":"concepts/spec_sheet/#important-notes","title":"Important Notes","text":"<ul> <li>Page names under pages must have a unique name without spaces</li> <li>Page routes must be unique</li> <li>Grid names under grids must be unique without spaces</li> <li>Component names under components must be unique but can have spaces</li> <li>The routes of individual components must be unique</li> <li>Routes must start with a <code>/</code></li> <li>Every query needs a restriction, below is the default one.<ul> <li><code>python       def restriction(**kwargs):           return dict(**kwargs)</code></li> </ul> </li> <li>Overlapping components at the same (x, y) does not work, the grid system will not allow overlapping components it will wrap them horizontally if there is enough space or bump them down to the next row.</li> </ul>"}]}